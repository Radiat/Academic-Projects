/** 
 * Name: Chris Carpio
 * login id: 05carpio
 * Student ID: 994954518
 */

import javax.swing.*;
import java.io.*;
import java.util.*;

/** The TilePuzzleDriver class
 *
 *  This class is the starting point for the tile
 *  puzzle game. It is invoked from the command line,
 *  along with the location of the layout file and 
 *  the desired interface type. Its main purpose is 
 *  to initialize the components needed for the game 
 *  and the specified interface.
 */
public class TilePuzzleDriver {
  
  /** Obtain the tile layout from a specified file.
   * 
   * Create and return an array of integers whose 
   * contents are found by reading and parsing the 
   * file specified by the input string. 
   * 
   * @param layoutFileName The name of the file that 
   * contains the layout for the tile puzzle game. The 
   * full path should be specified for this file name
   * (i.e. the drive and the directory path as well).
   * 
   * @return The two-dimensional array of integers that
   * represents the tile layout in numerical form.
   */
  public static int[][] getLayoutFromFile(String layoutFileName)
                                              throws IOException {
    // create the layout grid with this height and width
    // (assumes that the first dimension is horizontal
    //  and the second dimension is the vertical).
    
    int numOfRows = 0;
    int numOfColumns = 0;
    String temp = "";
    BufferedReader br = new BufferedReader(new FileReader(layoutFileName));
    StringTokenizer st = new StringTokenizer(br.readLine());
    numOfColumns = st.countTokens() -  1;
    while (br.readLine() != null) {
      numOfRows++;
    }
    BufferedReader bs = new BufferedReader(new FileReader(layoutFileName));
    StringTokenizer su;
    int[][] dataArray = new int[numOfRows + 1][numOfColumns + 1];
    for (int i = 0; i <= numOfRows; i++) {
      su = new StringTokenizer(bs.readLine());
      for (int j = 0; j <= numOfColumns; j++) {
        temp = su.nextToken();
        if (temp.equals("*")) {
          dataArray[i][j] = - 1;
        }
        else {
          dataArray[i][j] = Integer.parseInt(temp);
        }
      }
    }
    return dataArray;
  }
  /** The main method for the tile puzzle game.
   * 
   * @param args Array of <code>String</code>s that stores
   * the input parameters passed in at the command line. 
   * The first parameter is the layout file location, and  
   * the second parameter specifies the interface to use 
   * for this game (text or GUI).
   */
  public static void main(String[] args) throws IOException {
    // start by making sure that the layout file location and the
    // interface type have been provided at the command prompt.
    if (args.length < 2) {
      System.out.println("You must provide at least two parameters.");
      return;
    }
    else if (args[1].toLowerCase().equals("text")) {
      int[][] layout = getLayoutFromFile(args[0]);
      TilePuzzle puzzle = new TilePuzzle(layout);
      TilePuzzleTextUI game = new TilePuzzleTextUI(puzzle);
      game.startGame();      
    }
    else if (args[1].toLowerCase().equals("gui")) {
      // obtain the given file name using a JFileChooser. 
      // read the layout from the file.
      // start the window-based tile puzzle game.
      if (args[0].equals("")) {
        args[0] = JOptionPane.showInputDialog(null, 
                                              "Please specify an initial" +
                                              " directory:",
                                              "No directory found!",
                                              JOptionPane.WARNING_MESSAGE);
      }
      JFileChooser select = new JFileChooser(args[0]);
      int result = select.showOpenDialog(null);
      if (result == JFileChooser.APPROVE_OPTION) {
        int[][] fileArray = new int[0][0];
        File puzzFile = select.getSelectedFile();
        if (puzzFile.exists()) {
          fileArray = TilePuzzleDriver.getLayoutFromFile(puzzFile.getPath());
        }
      TilePuzzle puzzle = new TilePuzzle(fileArray);
      TileListener listen = new TileListener(puzzle);
      TilePuzzleWindow window = new TilePuzzleWindow(puzzle, listen);
      listen.setPuzzleWindow(window);
      }
    }
    else {
      System.out.println("Invalid interface specified for tile game.");
      return;
    }
  }
}
