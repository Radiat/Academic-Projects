/** 
 * Name: Chris Carpio
 * login id: 05carpio
 * Student ID: 994954518
 */

import junit.framework.TestCase;

/**
 * A JUnit test case class.
 * Every method starting with the word "test" will be called when running
 * the test with JUnit.
 */
public class TilePuzzleTester extends TestCase {
  

  /**
   * To test the constructor and the integrity of it's getGrid method.
   */
  public void testConstructor() {
    int[][] nums = {{1, 2, 3}, {4, -1, 5}, {6, 7, 8}};
    TilePuzzle puzzle = new TilePuzzle(nums);
    assertEquals(nums, puzzle.getGrid());
  }
     
  /**
   * To see whether a tile can occupy the blank space that is directly above
   * it, using the moveTile method. Also tests the integrity 
   * of the equals method.
   */
  public void testmoveTileUp() {
    int[][] nums = {{1, 2, 3}, {4, -1, 5}, {6, 7, 8}};
    TilePuzzle puzzle = new TilePuzzle(nums);
    assertTrue(puzzle.moveTile(7));
    int[][] other = {{1, 2, 3}, {4, 7, 5}, {6, -1, 8}}; 
    TilePuzzle puzz2 = new TilePuzzle(other);
    assertTrue(puzzle.equals(puzz2));
  }
  
  /**
   * Another test to see if a tile can move downwards, using moveTile.
   */
  public void testmoveTileDown() {
    int[][] nums = {{1, 2, 3}, {4, -1, 5}, {6, 7, 8}};
    TilePuzzle puzzle = new TilePuzzle(nums);
    assertTrue(puzzle.moveTile(2));
    int[][] other = {{1, -1, 3}, {4, 2, 5}, {6, 7, 8}}; 
    TilePuzzle puzz2 = new TilePuzzle(other);
    assertTrue(puzzle.equals(puzz2));
  }
  
  /**
   * Yet another test for the moveTile method, this time the blank tile is to 
   * the left.
   */
    public void testmoveTileLeft() {
    int[][] nums = {{1, 2, 3}, {-1, 4, 5}, {6, 7, 8}};
    TilePuzzle puzzle = new TilePuzzle(nums);
    assertTrue(puzzle.moveTile(4));
    int[][] other = {{1, 2, 3}, {4, -1, 5}, {6, 7, 8}}; 
    TilePuzzle puzz2 = new TilePuzzle(other);
    assertTrue(puzzle.equals(puzz2));
  }
   
    /**
     * Finally, a test with the moveTile method to see if the inputted tile can
     * occupy the blank tile to it's right.
     */
      public void testmoveTileRight() {
    int[][] nums = {{1, 2, 3}, {4, 5, -1}, {6, 7, 8}};
    TilePuzzle puzzle = new TilePuzzle(nums);
    assertTrue(puzzle.moveTile(5));
    int[][] other = {{1, 2, 3}, {4, -1, 5}, {6, 7, 8}}; 
    TilePuzzle puzz2 = new TilePuzzle(other);
    assertTrue(puzzle.equals(puzz2));
  }
      
      /**
       * A different test of moveTile, checks to see if an invalid move
       * cannot be completed.
       */
      public void testmoveTileInvalid() {
       int[][] nums = {{1, 2, 3}, {4, 5, -1}, {6, 7, 8}};
       TilePuzzle puzzle = new TilePuzzle(nums);
       assertFalse(puzzle.moveTile(1));
       assertFalse(puzzle.moveTile(7));
      }
      
      /**
       * Testing the hasWon method with a winning combination.
       */
      public void testhasWonTrue() {
        int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, 8, -1}};
        TilePuzzle puzzle = new TilePuzzle(nums);
        assertTrue(puzzle.hasWon());
      }
      
      /**
       * Another test for the hasWon method, for an unsolved combination.
       */
      public void testhasWonFalse() {
        int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
        TilePuzzle puzzle = new TilePuzzle(nums);
        assertFalse(puzzle.hasWon());
      }
      
      /**
       * This test for hasWon contains an array that looks like it's solved,
       * but the last two numbers do not follow sequencial order, in that
       * the last one is 1 above the estimated maximum (so if the grid had
       * a max tile value of 8, this tile would be 9).
       */
        public void testhasWonTrick() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, 9, -1}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          assertFalse(puzzle.hasWon());
      }
        
        /**
         * A simple test for numTileMoves. Tests if two moves will return two.
         */
        public void testnumTileMoves() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          puzzle.moveTile(5);
          puzzle.moveTile(6);
          assertEquals(2, puzzle.numTileMoves());
        }
        
        /**
         * Another test for numTileMoves, this time testing if no moves will
         * register 0.
         */
        public void testnumTileMovesNone() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          assertEquals(0, puzzle.numTileMoves());
        }
        
        /**
         * A test for maxTileValue that monitors if the greatest value in the
         * grid, which in this case is 8, returns exactly that.
         */
        public void testmaxTileValue() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          assertEquals(8, puzzle.maxTileValue());
        }
        
        /**
         * Another test for maxTileValue, this time the grid is a bit 
         * randomized so that the greatest value occurs first.
         */
        public void testmaxTileValueRandom() {
          int[][] nums = {{8, 2, 3}, {5, 4, 6}, {8, 7, 1}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          assertEquals(8, puzzle.maxTileValue());
        }
        
        /**
         * A test for getGrid, that tests if an array has been correctly passed
         * to the TilePuzzle. 
         */
        public void testgetGrid() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          assertEquals(nums, puzzle.getGrid());
        }
        
        /**
         * To examine if two grids in two different TilePuzzles are equals. 
         * This is also an inheriently test for the getGrid method. This
         * particular test is to see if the grids are equal, which they are.
         */
        public void testequalsTrue() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          int[][] other = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzz2 = new TilePuzzle(other);
          assertTrue(puzzle.equals(puzz2));
        }
        
        /**
         * Similar to the above test for equals, except in this case the
         * grids are not equal in terms of elements in array.
         */
        public void testequalsFalse() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          int[][] other = {{1, 2, 3}, {4, 6, 5}, {7, -1, 8}};
          TilePuzzle puzz2 = new TilePuzzle(other);
          assertFalse(puzzle.equals(puzz2));
        }
        
        /**
         * A bit different this time for the equals method, this tests to
         * see if the grids are equals when the elements are similar, but
         * the grid dimensions are different. Hypothetically, they aren't equal.
         */
        public void testequalsFalseDimensions() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}, {9, 10, 11}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          int[][] other = {{1, 2}, {3, 4}, {5, 6}, {7, -1}, {8, 9}, {10, 11}};
          TilePuzzle puzz2 = new TilePuzzle(other);
          assertFalse(puzzle.equals(puzz2));
        }
        
        /**
         * A test for toString. It tests to see if the grid outputted is similar
         * to the hypothetical results, as a String.
         */
        public void testtoString() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          String output = "1 2 3\n4 5 6\n7 * 8";
          assertEquals(output, puzzle.toString());
        }
        
        /**
         * Another test for toString. The grid is of 1XN format.
         */
        public void testtoStringComplex() {
          int[][] nums = {{1}, {2}, {-1}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          assertEquals("1\n2\n*", puzzle.toString());
        }
        
        /**
         * A final test for toString, that has been modified by moveTile.
         */
        public void testtoStringModded() {
          int[][] nums = {{1, 2, 3}, {4, 5, 6}, {7, -1, 8}};
          TilePuzzle puzzle = new TilePuzzle(nums);
          puzzle.moveTile(5);
          puzzle.moveTile(2);
          String output = "1 * 3\n4 2 6\n7 5 8";
          assertEquals(output, puzzle.toString());
        }
}
